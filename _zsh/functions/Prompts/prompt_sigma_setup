#!/bin/zsh
# sigma prompt theme

autoload is-at-least

prompt_sigma_help () {
  cat <<'EOF'
This prompt is Sigma's one.

2 lines, git-enabled
EOF
}

function prompt_sigma_precmd {
    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))

    ###
    # Truncate the path if it's too long.
    PR_FILLBAR=""
    PR_PWDLEN=""
    local virt=$(virtualenv_info_for_prompt)
    local promptsize=${#${(%):---(%n@%m)------${virt}----()--}}
    local pwdsize=${#${(%):-%~}}

    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
        ((PR_PWDLEN=$TERMWIDTH - $promptsize))
    else
        PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
    fi
}

function prompt_sigma_color_suspend() {
    echo "%1(j.%{$fg[$suspend_color]%}.)%B$1%b%{$reset_color%}"
}

prompt_sigma_setup () {
    autoload -U colors
    colors

    error_color="red"
    login_color="green"
    if [ -n "$SSH_CLIENT" ]; then
        host_color="red"
    else
        host_color="cyan"
    fi
    suspend_color="blue"
    user_color="yellow"

    login="%{$fg[$login_color]%}%n%{$reset_color%}"
    root_invite="%{$fg[$error_color]%}%B#%b%{$reset_color%}"
    user_invite="%{$fg[$user_color]%}%B$%b%{$reset_color%}"
    host="%{$fg[yellow]%}%B@%b%{$reset_color%}%{$fg[$host_color]%}%B%m%b%{$reset_color%}"

    date_normal="%T"
    date_error="%{$fg[$error_color]%}%T%{$reset_color%}"

    ###
    # Need this so the prompt will work.
    setopt prompt_subst

    ###
    # See if we can use colors.
    autoload colors zsh/terminfo
    if [[ "$terminfo[colors]" -ge 8 ]]; then
        colors
    fi
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
        eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
        eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
        (( count = $count + 1 ))
    done
    PR_NO_COLOUR="%{$terminfo[sgr0]%}"

    typeset -A altchar
    set -A altchar ${(s..)terminfo[acsc]}
    PR_SET_CHARSET="%{$terminfo[enacs]%}"
    PR_SHIFT_IN="%{$terminfo[smacs]%}"
    PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
    PR_HBAR=${altchar[q]:--}
    PR_ULCORNER=${altchar[l]:--}
    PR_LLCORNER=${altchar[m]:--}
    PR_LRCORNER=${altchar[j]:--}
    PR_URCORNER=${altchar[k]:--}

    ###
    # Decide if we need to set titlebar text.

    case $TERM in
	xterm*|rxvt*)
	    PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
	    ;;
	screen)
	    PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
	    ;;
	*)
	    PR_TITLEBAR=''
	    ;;
    esac

    ###
    # Finally, the prompt.
    ENV_PREFIX="env:"
    PR_LBRACE="["
    PR_RBRACE="]"
    
    PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}$PR_CYAN$PR_SHIFT_IN$PR_ULCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
($PR_GREEN$login$host$PR_BLUE)\
$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_RED$PR_LBRACE$PR_YELLOW$ENV_PREFIX\
$PR_CYAN$(virtualenv_info_for_prompt)$PR_RED$PR_RBRACE$PR_BLUE\
$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_HBAR${(e)PR_FILLBAR}$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
($PR_GREEN%$PR_PWDLEN<...<%~%<<$PR_BLUE)\
$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_URCORNER$PR_SHIFT_OUT\

$PR_CYAN$PR_SHIFT_IN$PR_LLCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
$PR_YELLOW%D{%H:%M}\
$PR_LIGHT_BLUE:%(!.$PR_RED.$PR_WHITE)%#$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_RED$(git_info_for_prompt)$PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_NO_COLOUR '

    RPROMPT=' $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
%(?..$PR_LIGHT_RED%?$PR_BLUE:)\
($PR_YELLOW%D{%a,%b%d}$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'

    PS2='$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$PR_LIGHT_GREEN%_$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '

    if is-at-least "4.3.4"; then
        add-zsh-hook precmd prompt_sigma_precmd
    else
        function precmd() {
            prompt_sigma_precmd
        }
    fi
}
prompt_sigma_setup "$@"

