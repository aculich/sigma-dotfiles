#!/bin/zsh

autoload _list_files
autoload _canonical_paths

source ~/.zkbd/$TERM-$VENDOR-$OSTYPE

zshrc_load_status () {
    echo -n "\r.zshrc load: $* ... \e[0K"
}

zshrc_load_status 'setting options'

# export LC_ALL=C

setopt \
    always_last_prompt \
    append_history \
    auto_cd \
    auto_list \
    auto_menu \
    auto_param_keys \
    auto_param_slash \
    auto_pushd \
    auto_remove_slash \
    bad_pattern \
    bang_hist \
    cdable_vars \
    complete_aliases \
    complete_in_word \
    correct_all \
    correct_all \
    equals \
    extended_glob \
    function_argzero \
    glob \
    glob_complete \
    hash_cmds \
    hash_dirs \
    hash_list_all \
    hist_allow_clobber \
    hist_beep \
    hist_expire_dups_first \
    hist_ignore_all_dups \
    hist_ignore_dups \
    hist_ignore_space \
    hist_reduce_blanks \
    hist_verify \
    inc_append_history \
    interactive_comments \
    list_packed \
    list_types \
    long_list_jobs \
    magic_equal_subst \
    multios \
    nomatch \
    notify \
    numeric_glob_sort \
    path_dirs \
    posix_builtins \
    prompt_subst \
    pushd_ignore_dups \
    pushd_silent \
    pushd_to_home \
    rc_expand_param \
    sh_option_letters \
    short_loops \
    unset \
    zle \
    NO_all_export \
    NO_always_to_end \
    NO_auto_name_dirs \
    NO_auto_resume \
    NO_beep \
    NO_brace_ccl \
    NO_bsd_echo \
    NO_chase_links \
    NO_clobber \
    NO_correct \
    NO_csh_junkie_history \
    NO_csh_junkie_loops \
    NO_csh_junkie_quotes \
    NO_csh_null_glob \
    NO_extended_history \
    NO_glob_assign \
    NO_glob_dots \
    NO_hist_no_functions \
    NO_hist_no_store \
    NO_hist_save_no_dups \
    NO_hup \
    NO_ignore_braces \
    NO_ignore_eof \
    NO_list_ambiguous \
    NO_list_beep \
    NO_mail_warning \
    NO_mark_dirs \
    NO_menu_complete \
    NO_null_glob \
    NO_overstrike \
    NO_print_exit_value \
    NO_prompt_cr \
    NO_pushd_minus \
    NO_rc_quotes \
    NO_rm_star_silent \
    NO_rm_star_wait \
    NO_sh_file_expansion \
    NO_sh_word_split \
    NO_single_line_zle \
    NO_sun_keyboard_hack \
    NO_verbose

zshrc_load_status 'setting environment'

WORDCHARS=''

HISTFILE=~/.zshhistory
HISTSIZE=3000
SAVEHIST=3000
HIST_IGNORE_SPACE=1

LISTMAX=1000  # "Never" ask
export PAGER='most'
export MOST_EDITOR='most_editor %s %d'

LOGCHECK=60
WATCHFMT="[%B%t%b] %B%n%b has %a %B%l%b from %B%M%b"

# Prompts

autoload -U colors
colors

function color_suspend() {
    echo "%1(j.%{$fg[$suspend_color]%}.)%B$1%b%{$reset_color%}"
}

error_color="red"
login_color="green"
if test $SSH_CLIENT; then
    host_color="red"
else
    host_color="cyan"
fi
suspend_color="blue"
user_color="yellow"

login="%{$fg[$login_color]%}%n%{$reset_color%}"
root_invite="%{$fg[$error_color]%}%B#%b%{$reset_color%}"
user_invite="%{$fg[$user_color]%}%B$%b%{$reset_color%}"
host="%{$fg[$host_color]%}%m%{$reset_color%}"

PROMPT="[%B$login%b%B@$host%b %B%~%b]%(#.$root_invite.$user_invite) "

date_normal="%T"
date_error="%{$fg[$error_color]%}%T%{$reset_color%}"
RPROMPT="`color_suspend [`%B%(?.$date_normal.$date_error)%b`color_suspend ]`"

git_prompt_info() {
  ref=$(git-symbolic-ref HEAD 2> /dev/null) || return
  echo "[${ref#refs/heads/}]"
}

# Completions

zshrc_load_status 'completion system'

autoload -U compinit
compinit -C # don't perform security check
zmodload -i zsh/complist

zstyle ':completion:*' completer _complete _prefix _ignored _complete:-extended

zstyle ':completion::prefix-1:*' completer _complete
zstyle ':completion:incremental:*' completer _complete _correct
zstyle ':completion:predict:*' completer _complete

zstyle ':completion:*:approximate-one:*'  max-errors 1
zstyle ':completion:*:approximate-four:*' max-errors 4

zstyle ':completion:*:complete-extended:*' matcher 'r:|[.,_-]=* r:|=*'

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

zstyle ':completion::complete:*' use-cache 1
zstyle ':completion::complete:*' cache-path ~/.zsh/cache/$HOST

zstyle ':completion:*' expand 'yes'
zstyle ':completion:*' squeeze-slashes 'yes'

zstyle ':completion:*:complete:-command-::commands' ignored-patterns '*\~'

zstyle ':completion:*:*:*:users' ignored-patterns \
    adm apache bin daemon distccd games gdm haldaemon halt ident junkbust lp mail mailnull \
    messagebus named news nfsnobody nobody nscd ntp operator pcap postfix postgres radvd \
    rpc rpcuser rpm shutdown squid sshd sync uucp vcsa xfs

zstyle '*' single-ignored show

zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

zstyle ':completion:*:*:lpr:*' file-patterns '*.pdf *.ps *(-/)' '*:all-files'

zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

users=( yann hodique sigma )

zstyle ':completion:*' users $users

: ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}}
#_ssh_known_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[0-9]*}%%\ *}%%,*})

hosts=(
    "$_etc_hosts[@]"
#    "$_ssh_known_hosts[@]"
    )

zstyle ':completion:*' hosts $hosts

if which dircolors >&/dev/null && [[ -e "${zdotdir}/.colors" ]]; then
    eval "`dircolors -b $zdotdir/.colors`"
fi

zstyle ':completion:*' list-colors "$LS_COLORS"

zle -C all-matches complete-word _generic
bindkey '^Xa' all-matches
zstyle ':completion:all-matches:*' old-matches only
zstyle ':completion:all-matches::::' completer _all_matches

zle -C force-menu menu-complete _generic
bindkey '^Xm' force-menu
zstyle ':completion:force-menu:*' menu yes select

# Aliases / functions
zshrc_load_status 'aliases and functions'

_my_extended_wordchars='*?_-.[]~=&;!#$%^(){}<>:@,\\'
_my_extended_wordchars_space="${_my_extended_wordchars} "
_my_extended_wordchars_slash="${_my_extended_wordchars}/"

# is the current position \-quoted ?
is_backslash_quoted () {
    test "${BUFFER[$CURSOR-1,CURSOR-1]}" = "\\"
}

unquote-forward-word () {
    while is_backslash_quoted
    do zle .forward-word
    done
}

unquote-backward-word () {
    while is_backslash_quoted
    do zle .backward-word
    done
}

backward-to-space () {
    local WORDCHARS="${_my_extended_wordchars_slash}"
    zle .backward-word
    unquote-backward-word
}

forward-to-space () {
    local WORDCHARS="${_my_extended_wordchars_slash}"
    zle .forward-word
    unquote-forward-word
}

backward-to-/ () {
    local WORDCHARS="${_my_extended_wordchars}"
    zle .backward-word
    unquote-backward-word
}

forward-to-/ () {
    local WORDCHARS="${_my_extended_wordchars}"
    zle .forward-word
    unquote-forward-word
}

zle -N backward-to-space
zle -N forward-to-space
zle -N backward-to-/
zle -N forward-to-/

zle -N kill-region-or-backward-word

autoload zrecompile

alias which >&/dev/null && unalias which

alias wh=where

alias run-help >&/dev/null && unalias run-help
autoload run-help

autoload zcalc

bash () {
    NO_SWITCH="yes" command bash "$@"
}

restart () {
    exec $SHELL $SHELL_ARGS "$@"
}

profile () {
    ZSH_PROFILE_RC=1 $SHELL "$@"
}

reload () {
    if [[ "$#*" -eq 0 ]]; then
        . $zdotdir/.zshrc
    else
        local fn
        for fn in "$@"; do
            unfunction $fn
            autoload -U $fn
        done
    fi
}
compdef _functions reload

alias p='popd'

alias ls='command ls -F --color=auto'

alias ll='ls -l'

alias grep='command grep --color'

alias -g ...=../..
alias -g ....=../../..
alias -g .....=../../../..
alias -g ......=../../../../..
alias cd..='cd ..'
alias cd...='cd ../..'
alias cd....='cd ../../..'
alias cd.....='cd ../../../..'

alias cd/='cd /'

alias 1='cd -'
alias 2='cd +2'
alias 3='cd +3'
alias 4='cd +4'
alias 5='cd +5'
alias 6='cd +6'
alias 7='cd +7'
alias 8='cd +8'
alias 9='cd +9'

alias md='mkdir -p'
alias rd=rmdir

alias d='dirs -v'

po () {
    popd "$@"
    dirs -v
}

autoload zmv
alias mmv='noglob zmv -W'

alias j='jobs -l'
alias dn=disown

alias h='history -$LINES'

alias ts=typeset
compdef _typeset ts

alias cls='clear'
alias term='echo $TERM'

_ssh_auth_save() {
    ln -sf "$SSH_AUTH_SOCK" "$HOME/.screen/ssh-auth-sock.$HOSTNAME"
}
alias screen='_ssh_auth_save ; export HOSTNAME=$(hostname) ; screen'

alias info='pinfo'

compdef _users lh

alias f=finger
compdef _finger f

alias mv='nocorrect mv'
alias cd='nocorrect cd'
alias cp='nocorrect cp'
alias mkdir='nocorrect mkdir'
alias man='nocorrect man'
alias find='noglob find'
alias gcc='nocorrect gcc'
alias mkdir='nocorrect mkdir'

alias mysql='nocorrect mysql'
alias mysqlshow='nocorrect mysqlshow'
alias rj='nocorrect rj'

alias sd='export DISPLAY=:0.0'

alias mplayer=' mplayer'
alias xine=' xine'

export CVS_RSH=ssh

export MALLOC_CHECK_=0

export KDEDIR=/usr
export QTDIR=/usr/lib/qt4
export QMAKESPEC=linux-g++
export WANT_AUTOCONF_2_5=1

export EMACSCLIENT=emacsclient-cvs
export EDITOR="$EMACSCLIENT -t -a zile"

my_most_editor() {
    file=$1
    line=$2
    $EMACSCLIENT -t +$line $file -a zile +$line
}

export MOST_EDITOR='(file=%s; line=%d; $EMACSCLIENT -t +$line $file -a zile +$line)'

export BROWSER=mozilla-firefox

export TEXINPUTS=$TEXINPUTS:~/texmf:~/LaTeX/macros:~/LaTeX/fig
export JAVA_HOME=/usr/lib/jvm/java-6-sun/

PATH=$QTDIR/bin:$KDEDIR/bin:$PATH
export PATH=.:~/bin/:~/apps/bin/:/usr/local/bin:/usr/games/:$JAVA_HOME/bin:$PATH

export DISTCC_HOSTS='localhost hodique@faxe,lzo'
export CCACHE_PREFIX='distcc'

export MOZILLA_FIVE_HOME=/usr/lib/firefox

export MPD_HOST=deby
export MPD_PORT=6600

opiedev () {
    export QTDIR=~/opiehome/qt-2.3.7
    export OPIEDIR=~/opiehome/opie
    export LD_LIBRARY_PATH=$QTDIR/lib:$OPIEDIR/lib
    export PATH=$QTDIR/bin:$OPIEDIR/bin:$PATH
}

# emacs, windowed
e () {
    if [[ -n "$OTHER_USER" ]]; then
        emacs -l $ZDOTDIR/.emacs "$@" &!
    else
        emacs "$@" &!
    fi
}

# enable ^Z
alias nano='/usr/bin/nano -z'


# change some applications
alias vi='zile'
alias top='htop'
alias cat='dog'
alias less='most'

if which lftp >&/dev/null; then
    alias ftp=lftp
elif which ncftp >&/dev/null; then
    alias ftp=ncftp
fi

alias tf='less +F'
alias tfs='less -S +F'

alias bz=bzip2
alias buz=bunzip2

zshrc_load_status 'key bindings'

bindkey -e
bindkey -s '^X^Z' '%-^M'
bindkey '^[e' expand-cmd-path
#bindkey -s '^X?' '\eb=\ef\C-x*'
bindkey '^[^I' reverse-menu-complete
bindkey '^X^N' accept-and-infer-next-history
bindkey '^[p' history-beginning-search-backward
bindkey '^[n' history-beginning-search-forward
bindkey '^[P' history-beginning-search-backward
bindkey '^[N' history-beginning-search-forward
bindkey '^w' kill-region-or-backward-word
bindkey '^W' kill-region-or-backward-word
bindkey '^I' complete-word
bindkey '^Xi' incremental-complete-word
bindkey '^[[1;5D' emacs-backward-word
bindkey '^[[1;5C' emacs-forward-word
bindkey "^[B"  backward-to-space
bindkey "^[F"  forward-to-space
bindkey "^[^b" backward-to-/
bindkey "^[^f" forward-to-/

if zmodload zsh/deltochar >&/dev/null; then
    bindkey '^[z' zap-to-char
    bindkey '^[Z' delete-to-char
fi

# Fix weird sequence that rxvt produces
bindkey -s '^[[Z' '\t'

bindkey "$key[Up]" up-line-or-search
bindkey "$key[Down]" down-line-or-search

bindkey "^[[z3c" backward-kill-word

zshrc_load_status 'miscellaneous'

LI=/usr/src/linux
L4=/usr/src/linux-2.4
CV=/usr/local/cvsroot
RC=/etc/rc.d/init.d
VL=/var/log

echo -n "\r"

which check_hist_size >&/dev/null && check_hist_size

autoload -U zsh-mime-setup
zsh-mime-setup

alias -s pdf=xpdf
alias -s ps=gv
alias -s dvi=xdvi
alias -s html=html
alias -s tgz='tar zxvf'


cpd() {
    TRAPINT () {
        bindkey "^M" accept-line
        trap - INT
        builtin let "$1 > 0" && return $[128+$1]
    }

    bindkey -s "^M" "^X^W"
    bindkey "^[k" kill-region
    bindkey -s "" "^[2^[|^A cd ^A^@^[<^[k^E^@^[>^E^[k^[a^X^K"

    cpd_var=` builtin print -l \`dirs \``

    vared cpd_var
    bindkey "^M" accept-line
    eval $cpd_var
}

alias pvs='pvs -emacs emacs-cvs'

flv2avi () {
    mencoder $1 -ofps 15 -vf scale=300:-2 -oac lavc -ovc lavc \
        -lavcopts vcodec=msmpeg4v2:abitrate=64                \
        -o `basename $1 .flv`.avi
}


function precmd {

    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))


    ###
    # Truncate the path if it's too long.

    PR_FILLBAR=""
    PR_PWDLEN=""

    local promptsize=${#${(%):---(%n@%m)---()--}}
    local pwdsize=${#${(%):-%~}}

    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
        ((PR_PWDLEN=$TERMWIDTH - $promptsize))
    else
        PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
    fi
}

preexec () {
    if [[ "$TERM" == "screen" ]]; then
        local CMD=${1[(wr)^(*=*|sudo|-*)]}
        echo -n "\ek$CMD\e\\"
    fi
}


setprompt () {
    ###
    # Need this so the prompt will work.

    setopt prompt_subst


    ###
    # See if we can use colors.

    autoload colors zsh/terminfo
    if [[ "$terminfo[colors]" -ge 8 ]]; then
        colors
    fi
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
        eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
        eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
        (( count = $count + 1 ))
    done
    PR_NO_COLOUR="%{$terminfo[sgr0]%}"

    typeset -A altchar
    set -A altchar ${(s..)terminfo[acsc]}
    PR_SET_CHARSET="%{$terminfo[enacs]%}"
    PR_SHIFT_IN="%{$terminfo[smacs]%}"
    PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
    PR_HBAR=${altchar[q]:--}
    PR_ULCORNER=${altchar[l]:--}
    PR_LLCORNER=${altchar[m]:--}
    PR_LRCORNER=${altchar[j]:--}
    PR_URCORNER=${altchar[k]:--}

    ###
    # Decide if we need to set titlebar text.

    case $TERM in
	xterm*|rxvt*)
	    PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
	    ;;
	screen)
	    PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
	    ;;
	*)
	    PR_TITLEBAR=''
	    ;;
    esac


    ###
    # Decide whether to set a screen title
    if [[ "$TERM" == "screen" ]]; then
	PR_STITLE=$'%{\ekzsh\e\\%}'
    else
	PR_STITLE=''
    fi

    ###
    # Finally, the prompt.

    PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}$PR_CYAN$PR_SHIFT_IN$PR_ULCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
($PR_GREEN%(!.%SROOT%s.%n)$PR_RED@$PR_CYAN%m$PR_BLUE)\
$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_HBAR${(e)PR_FILLBAR}$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
($PR_GREEN%$PR_PWDLEN<...<%~%<<$PR_BLUE)\
$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_URCORNER$PR_SHIFT_OUT\

$PR_CYAN$PR_SHIFT_IN$PR_LLCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
$PR_YELLOW%D{%H:%M}\
$PR_LIGHT_BLUE:%(!.$PR_RED.$PR_WHITE)%#$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_RED$(git_prompt_info)$PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_NO_COLOUR '

    RPROMPT=' $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
%(?..$PR_LIGHT_RED%?$PR_BLUE:)\
($PR_YELLOW%D{%a,%b%d}$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'

    PS2='$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$PR_LIGHT_GREEN%_$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '
}

setprompt

extract_archive () {
    local old_dirs current_dirs lower
    lower=${(L)1}
    old_dirs=( *(N/) )
    if [[ $lower == *.tar.gz || $lower == *.tgz ]]; then
        tar zxfv $1
    elif [[ $lower == *.gz ]]; then
        gunzip $1
    elif [[ $lower == *.tar.bz2 || $lower == *.tbz ]]; then
        bunzip2 -c $1 | tar xfv -
    elif [[ $lower == *.bz2 ]]; then
        bunzip2 $1
    elif [[ $lower == *.zip ]]; then
        unzip $1
    elif [[ $lower == *.rar ]]; then
        unrar e $1
    elif [[ $lower == *.tar ]]; then
        tar xfv $1
    elif [[ $lower == *.lha ]]; then
        lha e $1
    else
        print "Unknown archive type: $1"
        return 1
    fi
    # Change in to the newly created directory, and
    # list the directory contents, if there is one.
    current_dirs=( *(N/) )
    for i in {1..${#current_dirs}}; do
        if [[ $current_dirs[$i] != $old_dirs[$i] ]]; then
            cd $current_dirs[$i]
            ls
            break
        fi
    done
}

alias ex=extract_archive
compdef '_files -g "*.gz *.tgz *.bz2 *.tbz *.zip *.rar *.tar *.lha"' extract_archive

# Prefer ipython for interactive shell
smart_python () {
    # this function is actually rather dumb
    if [[ -n $1 ]]; then
        python $argv
    else
        #if no parameters were given, then assume we want an ipython shell
        if [[ -n $commands[ipython] ]]; then
            ipython
        else
            python
        fi
    fi
}

alias py=smart_python

# tab-complete options for smart_python just like for python
compdef _python smart_python

alias edit=$EMACSCLIENT -t

for i in ~/Projects/bzr/hachoir.d/hachoir.mine/hachoir-*; do export PYTHONPATH=$PYTHONPATH:$i; done

export LIBXCB_ALLOW_SLOPPY_LOCK=1

eval `keychain -q --nogui --eval --agents ssh id_rsa id_dsa`